#!/bin/bash

IN=( "$@" )
START_TIME=`date +%s`
THE_PATH=$"/Users/trentarmstrong/Desktop/_Current_Igniter_Projects/1-Mini_Movie_Tag/Assets"
IG_TAG=$"Igniter_TV_Logo_Tag.mov"
WT_TAG=$"Worship_Together_Tag-Fade_HD.mov"
WTK_TAG=$"WT_Kids_Tag_HD.mov"
default_tag="$THE_PATH/$IG_TAG"

PS3="Enter a number: "

select logo_tag in $IG_TAG $WT_TAG $WTK_TAG
do
    TAG="$THE_PATH/$logo_tag"
    break
done
NO_AUDIO=()
WRONG_SIZE=()

OUTPUT="../_Tagged""/$(basename "$1" .mov)-tagged.mov"

echo
echo "Checking for audio..." 

#Build File List
LINE=$(echo file \'$IN\' file \'$TAG\')

# define the movie array  
inputs=($IN)   

#define end card array  
endcard=($TAG)  

# Use for loop  
# get total subscripts in an array  

for FILE in ${IN[@]}
do
SIZE=$(ffprobe -v fatal -select_streams a:0 -show_entries stream=codec_name -of csv=s=x:p=0 "$FILE")
# echo $SIZE
        if [[ "$SIZE" != ""  ]]; then
                
                movie+=("$FILE")
        else
                NO_AUDIO+=("$FILE")
        fi
done

total=${#movie[*]}  

echo "CONVERTING $total FILE(S)"
echo

for (( i=0; i<=$(( $total -1 )); i++ ))  
    do  
        OUTPUT="../_Tagged""/$(basename "${movie[i]}" .mov)-tagged.mov"
        echo "Processing ..." ${movie[i]}
        # -loglevel quiet
        # ffmpeg -loglevel quiet -y -i ${movie[i]} -i ${endcard} -dn -vsync 0 -filter_complex '[0:v]scale=1920:1080,setsar=1[in1];[1:v]scale=1920:1080,setsar=1[in2];[in1][0:a:0][in2][1:a:0]concat=n=2:v=1:a=1 [v][a]' -map '[v]' -map '[a]' -c:v libx264 -pix_fmt yuv420p $OUTPUT
        ffmpeg -loglevel quiet -y -i ${movie[i]} -i ${endcard} -dn -vsync 0 -filter_complex '[0:v]scale=1920:1080,setsar=1[in1];[1:v]scale=1920:1080,setsar=1[in2];[in1][0:a:0][in2][1:a:0]concat=n=2:v=1:a=1 [v][a]' -map '[v]' -map '[a]' -c:v libx264 -preset slow -crf 18 -c:a aac -b:a 192k -pix_fmt yuv420p $OUTPUT
        # ffmpeg -loglevel quiet -y -i ${movie[i]} -i ${endcard} -dn -vsync 0 -filter_complex "xfade=transition=fade:duration=1:offset=$OFFSET" -c:v libx264 -pix_fmt yuv420p $OUTPUT
        echo "Complete:" $OUTPUT
        # ffprobe -v error -of flat=s_ -select_streams 1 -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1 ${movie[0]}
    done

echo
echo "Processing Complete!"
if [ ${#NO_AUDIO[@]} != 0 ]
    then
    echo
    echo "FAILED: "${NO_AUDIO[@]}
    echo
fi

END_TIME=`date +%s`
((ELAPSED=$END_TIME-$START_TIME))
printf 'Elapsed Time %dh:%dm:%ds\n' $(($ELAPSED/3600)) $(($ELAPSED%3600/60)) $(($ELAPSED%60))
echo
